// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CollisionKernel
struct Connectors
{
    float connectionL[24];
    int number[24];
};
struct SimplePointStr
{
    float3 position;
    float mass;
    int connectorCount;
    int ignorePhysics;
    float3 movePosition;
    float3 velocity;
    Connectors connectorPositions;
};
struct SimpleTriangle
{
    int t1;
    int t2;
    int t3;
};
// Create a RenderTexture with enableRandomWrite flag and set it
float Time;
RWStructuredBuffer<SimplePointStr> SimplePoints;
RWStructuredBuffer<SimplePointStr> SimplePointsOut;
StructuredBuffer<SimpleTriangle> Triangles;
RWStructuredBuffer<float3> Debug;
RWStructuredBuffer<float3> Debug2;
[numthreads(128, 1, 1)]
void CollisionKernel(uint3 id : SV_DispatchThreadID)
{
    SimplePointStr sp = SimplePoints[id.x];
    uint n,s;
    SimplePoints.GetDimensions(n,s);
    for (int i = 0; i < n; i++)
    {
        SimplePointStr sp2 = SimplePoints[i];
        sp.velocity = sp.velocity - (normalize(sp.velocity) * (0.01f + length(sp2.position - sp.position)));

    }
    sp.position = sp.position + sp.velocity;
    SimplePointsOut[id.x] = sp;

}
